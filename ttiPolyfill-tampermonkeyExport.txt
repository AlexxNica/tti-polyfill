{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Time to Interactive Polyfill","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://*","https://*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":true,"orig_connects":[]}},"storage":{"ts":1493737294261,"data":{}},"enabled":true,"position":1,"uuid":"1cd1dd11-d5fe-4a6c-bffe-1d97014d84da","source":""}]}