{"version":3,"file":"tti-polyfill.js","sources":["src/activityTrackerUtils.js","src/firstConsistentlyInteractiveCore.js","src/firstConsistentlyInteractiveDetector.js","src/index.js"],"sourcesContent":["// Copyright 2017 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nclass CallCounter {\n  constructor() {\n    this._count = 0;\n  }\n\n  next() {\n    this._count++;\n    return this._count;\n  }\n}\n\nconst requestCounter = new CallCounter();\n\nexport function patchXMLHTTPRequest(beforeXHRSendCb, onRequestCompletedCb) {\n  const send = XMLHttpRequest.prototype.send;\n  const requestId = requestCounter.next();\n  XMLHttpRequest.prototype.send = function() {\n    beforeXHRSendCb(requestId);\n    this.addEventListener('readystatechange', e => {\n      // readyState 4 corresponds to 'DONE'\n      if (this.readyState === 4) onRequestCompletedCb(requestId);\n    });\n    return send.apply(this, arguments);\n  };\n}\n\nexport function patchFetch(beforeRequestCb, afterRequestCb){\n  const originalFetch = fetch;\n  fetch = function() {\n    return new Promise((resolve, reject) => {\n      console.log(\"New fetch running\");\n      const requestId = requestCounter.next();\n      beforeRequestCb(requestId);\n      originalFetch.apply(this, arguments).then(\n        value => {\n          afterRequestCb(requestId);\n          resolve(value);\n        },\n        e => {\n          afterRequestCb(e);\n          reject(e);\n        }\n      );\n    });\n  };\n}\n\nconst _nodeTypesFetchingNetworkResources = [\"img\", \"script\", \"iframe\", \"link\", \"audio\", \"video\", \"source\"];\n\nfunction _descendentContainsNodeType(nodeTypes, nodes) {\n  for (const node of nodes) {\n    if (nodeTypes.includes(node.nodeName.toLowerCase())) {\n      return true;\n    }\n\n    if (node.children && _descendentContainsNodeType(nodeTypes, node.children)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function observeResourceFetchingMutations(callback) {\n  const mutationObserver = new MutationObserver(function (mutations) {\n    for (const mutation of mutations) {\n      switch (mutation.type) {\n      case \"childList\":\n        if (_descendentContainsNodeType(\n          _nodeTypesFetchingNetworkResources, mutation.addedNodes)) {\n          callback(mutation);\n        }\n        break;\n      case \"attributes\":\n        if (_nodeTypesFetchingNetworkResources.includes(mutation.target.tagName.toLowerCase())) {\n          callback(mutation);\n        }\n        break;\n      }\n    }\n  });\n\n  const observerConfig = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    attributeFilter: ['href', 'src'],\n  };\n\n  mutationObserver.observe(document, observerConfig);\n  return mutationObserver;\n}\n","// Copyright 2017 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nexport function computeFirstConsistentlyInteractive(\n    searchStart, minValue, lastKnownNetwork2Busy, currentTime, longTasks) {\n\n  // Have not reached network 2-quiet yet.\n  if ((currentTime - lastKnownNetwork2Busy) < 5000) return null;\n  const maybeFCI = longTasks.length === 0 ?\n        searchStart : longTasks[longTasks.length - 1].end;\n\n  // Main thread has not been quiet for long enough.\n  if (currentTime - maybeFCI < 5000) return null;\n\n  return Math.max(maybeFCI, minValue);\n}\n\nexport function computeLastKnownNetwork2Busy(incompleteRequestStarts, observedResourceRequests, currentTime) {\n  if (incompleteRequestStarts.length > 2) return currentTime;\n\n  const endpoints = [];\n  for (const req of observedResourceRequests) {\n    endpoints.push({\n      timestamp: req.start,\n      type: 'requestStart'\n    });\n    endpoints.push({\n      timestamp: req.end,\n      type: 'requestEnd'\n    });\n  }\n\n  for (const ts of incompleteRequestStarts) {\n    endpoints.push({\n      timestamp: ts,\n      type: 'requestStart'\n    });\n  }\n\n  endpoints.sort((a, b) => a.timestamp - b.timestamp);\n\n  let currentActive = incompleteRequestStarts.length;\n\n  for (let i = endpoints.length - 1; i >= 0; i--) {\n    const endpoint = endpoints[i];\n    switch (endpoint.type) {\n    case 'requestStart':\n      currentActive--;\n      break;\n    case 'requestEnd':\n      currentActive++;\n      if (currentActive > 2) {\n        return endpoint.timestamp;\n      }\n      break;\n    default:\n      throw Error(\"Internal Error: This should never happen\");\n    }\n  }\n\n  // If we reach here, we were never network 2-busy.\n  return 0;\n}\n","// Copyright 2017 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nimport * as ActivityTrackerUtils from './activityTrackerUtils.js';\nimport * as FirstConsistentlyInteractiveCore from './firstConsistentlyInteractiveCore.js';\n\n\nexport default class FirstConsistentlyInteractiveDetector {\n  constructor(config = {}) {\n    this._debugMode = config.debugMode !== undefined ?\n      config.debugMode : false;\n    this._useMutationObserver = config.useMutationObserver !== undefined ?\n      config.useMutationObserver : true;\n\n    const snippetEntries = window.__tti && window.__tti.e;\n    const snippetObserver = window.__tti && window.__tti.o;\n\n    // If we recorded some long tasks before this class was initialized,\n    // consume them now.\n    if (snippetEntries) {\n      this._debugLog(\"Consuming the long task entries already recorded.\");\n      this._longTasks = snippetEntries.map(performanceEntry =>\n          ({start: performanceEntry.startTime,\n           end: performanceEntry.startTime + performanceEntry.duration}));\n    } else {\n      this._longTasks = [];\n    }\n\n    // If we had a long task observer attached by the snippet, disconnect it\n    // here. We will be adding a new long task observer soon with a more\n    // complex callback.\n    if (snippetObserver) {\n      snippetObserver.disconnect();\n    }\n\n    this._networkRequests = [];\n    this._incompleteJSInitiatedRequestStartTimes = new Map();\n\n    this._timerId = null;\n    this._timerActivationTime = -Infinity;\n\n    // Timer tasks are only scheduled when detector is enabled.\n    this._scheduleTimerTasks = false;\n\n    // If minValue is null, by default it is DOMContentLoadedEnd.\n    this._minValue = config.minValue || null;\n\n    this._registerListeners();\n  }\n\n  getFirstConsistentlyInteractive() {\n    return new Promise((resolve, reject) => {\n      this._firstConsistentlyInteractiveResolver = resolve;\n\n      if (document.readyState == \"complete\") {\n        this.startSchedulingTimerTasks();\n      } else {\n        window.addEventListener('load', () => {\n          // You can use this to set a custom minimum value.\n          // this.setMinValue(20000);\n\n          this.startSchedulingTimerTasks();\n        });\n      }\n    })\n  }\n\n  startSchedulingTimerTasks() {\n    this._debugLog(\"Enabling FirstConsistentlyInteractiveDetector\");\n    this._scheduleTimerTasks = true;\n    const lastLongTaskEnd = this._longTasks.length > 0 ?\n          this._longTasks[this._longTasks.length - 1].end : 0;\n    const lastKnownNetwork2Busy = FirstConsistentlyInteractiveCore.computeLastKnownNetwork2Busy(this._incompleteRequestStarts, this._networkRequests);\n    this.rescheduleTimer(Math.max(lastKnownNetwork2Busy + 5000, lastLongTaskEnd));\n  }\n\n  setMinValue(minValue) {\n    this._minValue = minValue;\n  }\n\n  // earlistTime is a timestamp in ms, and the time is relative to navigationStart.\n  rescheduleTimer(earliestTime) {\n    // Check if ready to start looking for firstConsistentlyInteractive\n    if (!this._scheduleTimerTasks) {\n      this._debugLog(\"startSchedulingTimerTasks must be called before calling rescheduleTimer\");\n      return;\n    }\n\n    this._debugLog(\"Attempting to reschedule FirstConsistentlyInteractive check to \", earliestTime);\n    this._debugLog(\"Previous timer activation time: \", this._timerActivationTime);\n\n    if (this._timerActivationTime > earliestTime) {\n      this._debugLog(\"Current activation time is greater than attempted reschedule time. No need to postpone.\");\n      return;\n    }\n    clearTimeout(this._timerId);\n    this._timerId = setTimeout(() => this._checkTTI(), earliestTime - performance.now());\n    this._timerActivationTime = earliestTime;\n    this._debugLog(\"Rescheduled firstConsistentlyInteractive check at \", earliestTime);\n  }\n\n  disable() {\n    this._debugLog(\"Disabling FirstConsistentlyInteractiveDetector\");\n    clearTimeout(this._timerId);\n    this._scheduleTimerTasks = false;\n    this._unregisterListeners();\n  }\n\n  _debugLog() {\n    if (this._debugMode) {\n      console.log(...arguments);\n    }\n  }\n\n  _registerPerformanceObserver() {\n    this._performanceObserver = new PerformanceObserver((entryList) => {\n      var entries = entryList.getEntries();\n      for (const entry of entries) {\n        if (entry.entryType === 'resource') {\n          this._networkRequestFinishedCallback(entry);\n        }\n        if (entry.entryType === \"longtask\") {\n          this._longTaskFinishedCallback(entry);\n        }\n      }\n    });\n    this._performanceObserver.observe({entryTypes: [\"longtask\", \"resource\"]});\n  }\n\n  _registerMutationObserver() {\n    this._mutationObserver =\n      ActivityTrackerUtils.observeResourceFetchingMutations(\n        this._mutationObserverCallback.bind(this));\n  }\n\n  _registerListeners() {\n    ActivityTrackerUtils.patchXMLHTTPRequest(this._beforeJSInitiatedRequestCallback.bind(this),\n                        this._afterJSInitiatedRequestCallback.bind(this));\n    ActivityTrackerUtils.patchFetch(this._beforeJSInitiatedRequestCallback.bind(this),\n               this._afterJSInitiatedRequestCallback.bind(this));\n    this._registerPerformanceObserver();\n    if (this._useMutationObserver) this._registerMutationObserver();\n  }\n\n  _unregisterListeners() {\n    // We will leave the XHR / Fetch objects the way they were,\n    // since we cannot guarantee they were not modified further in between.\n    // Only unregister performance observers.\n    if (this._performanceObserver) this._performanceObserver.disconnect();\n    if (this._mutationObserver) this._mutationObserver.disconnect();\n  }\n\n  _beforeJSInitiatedRequestCallback(requestId) {\n    this._debugLog(\"Starting JS initiated request. Request ID: \", requestId);\n    this._incompleteJSInitiatedRequestStartTimes.set(requestId, performance.now());\n    this._debugLog(\"Active XHRs: \", this._incompleteJSInitiatedRequestStartTimes.size);\n  }\n\n  _afterJSInitiatedRequestCallback(requestId) {\n    this._debugLog(\"Completed JS initiated request with request ID: \", requestId);\n    this._incompleteJSInitiatedRequestStartTimes.delete(requestId);\n    this._debugLog(\"Active XHRs: \", this._incompleteJSInitiatedRequestStartTimes.size);\n  }\n\n  _networkRequestFinishedCallback(performanceEntry) {\n    this._debugLog(\"Network request finished: \", performanceEntry);\n    this._networkRequests.push({\n      start: performanceEntry.fetchStart,\n      end: performanceEntry.responseEnd\n    });\n    this.rescheduleTimer(\n      FirstConsistentlyInteractiveCore.computeLastKnownNetwork2Busy(this._incompleteRequestStarts, this._networkRequests) + 5000);\n  }\n\n  _longTaskFinishedCallback(performanceEntry) {\n    this._debugLog(\"Long task finished: \", performanceEntry);\n    const taskEndTime = performanceEntry.startTime +\n          performanceEntry.duration;\n    this._longTasks.push({\n      start: performanceEntry.startTime,\n      end: taskEndTime\n    });\n    this.rescheduleTimer(taskEndTime + 5000);\n  }\n\n  _mutationObserverCallback(mutationRecord) {\n    this._debugLog(\"Potentially network resource fetching mutation detected: \", mutationRecord);\n    this._debugLog(\"Pushing back FirstConsistentlyInteractive check by 5 seconds.\");\n    this.rescheduleTimer(performance.now() + 5000);\n  }\n\n  _getMinValue() {\n    if (this._minValue) return this._minValue;\n\n    if (performance.timing.domContentLoadedEventEnd) {\n      return performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart;\n    }\n\n    return null;\n  }\n\n  get _incompleteRequestStarts() {\n    return [...this._incompleteJSInitiatedRequestStartTimes.values()];\n  }\n\n  _checkTTI() {\n    this._debugLog(\"Checking if First Consistently Interactive was reached...\");\n    const navigationStart = performance.timing.navigationStart;\n    const lastBusy = FirstConsistentlyInteractiveCore.computeLastKnownNetwork2Busy(this._incompleteRequestStarts, this._networkRequests);\n\n    const firstPaint = window.chrome && window.chrome.loadTimes ?\n        (window.chrome.loadTimes().firstPaintTime * 1000 - navigationStart) : 0;\n    // First paint is not available in non-chrome browsers at the moment.\n    const searchStart = firstPaint || (performance.timing.domContentLoadedEventEnd - navigationStart);\n    const minValue = this._getMinValue();\n    const currentTime = performance.now();\n\n    // Ideally we will only start scheduling timers after DOMContentLoaded and\n    // this case should never be hit.\n    if (minValue === null) {\n      this._debugLog(\"No usable minimum value yet. Postponing check.\");\n      this.rescheduleTimer(Math.max(lastBusy + 5000, performance.now() + 1000));\n    }\n\n    this._debugLog(\"Parameter values: \");\n    this._debugLog(\"NavigationStart: \", navigationStart);\n    this._debugLog(\"lastKnownNetwork2Busy: \", lastBusy);\n    this._debugLog(\"Search Start: \", searchStart);\n    this._debugLog(\"Min Value: \", minValue);\n    this._debugLog(\"Last busy: \", lastBusy);\n    this._debugLog(\"Current time: \", currentTime);\n    this._debugLog(\"Long tasks: \", this._longTasks);\n    this._debugLog(\"Incomplete JS Request Start Times: \", this._incompleteRequestStarts);\n    this._debugLog(\"Network requests: \", this._networkRequests);\n\n\n    const maybeFCI = FirstConsistentlyInteractiveCore.computeFirstConsistentlyInteractive(\n        searchStart, minValue, lastBusy, currentTime, this._longTasks);\n\n    if (maybeFCI) {\n      this._firstConsistentlyInteractiveResolver(maybeFCI);\n      this.disable();\n    }\n\n    // First Consistently Interactive was not reached for whatever reasons. Check again in\n    // one second.\n    // Eventually we should become confident enough in our scheduler logic to\n    // get rid of this step.\n    this._debugLog(\"Could not detect First Consistently Interactive. Retrying in 1 second.\");\n    this.rescheduleTimer(performance.now() + 1000);\n  }\n}\n","// Copyright 2017 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nimport FirstConsistentlyInteractiveDetector from './firstConsistentlyInteractiveDetector.js';\n\n\nexport const getFirstConsistentlyInteractive = (opts) => {\n  if (!window.PerformanceLongTaskTiming) {\n    return Promise.resolve(null);\n  } else {\n    const detector = new FirstConsistentlyInteractiveDetector(opts);\n    return detector.getFirstConsistentlyInteractive();\n  }\n};\n"],"names":["patchXMLHTTPRequest","beforeXHRSendCb","onRequestCompletedCb","send","XMLHttpRequest","prototype","requestId","requestCounter","next","addEventListener","_this","readyState","apply","this","arguments","patchFetch","beforeRequestCb","afterRequestCb","originalFetch","fetch","Promise","resolve","reject","log","then","value","e","_descendentContainsNodeType","nodeTypes","nodes","node","includes","nodeName","toLowerCase","children","observeResourceFetchingMutations","callback","mutationObserver","MutationObserver","mutations","mutation","type","_nodeTypesFetchingNetworkResources","addedNodes","target","tagName","observerConfig","observe","document","computeFirstConsistentlyInteractive","searchStart","minValue","lastKnownNetwork2Busy","currentTime","longTasks","maybeFCI","length","end","Math","max","computeLastKnownNetwork2Busy","incompleteRequestStarts","observedResourceRequests","endpoints","req","push","start","ts","sort","a","b","timestamp","currentActive","i","endpoint","Error","CallCounter","_count","FirstConsistentlyInteractiveDetector","config","_debugMode","undefined","debugMode","_useMutationObserver","useMutationObserver","snippetEntries","window","__tti","snippetObserver","o","_debugLog","_longTasks","map","performanceEntry","startTime","duration","disconnect","_networkRequests","_incompleteJSInitiatedRequestStartTimes","Map","_timerId","_timerActivationTime","Infinity","_scheduleTimerTasks","_minValue","_registerListeners","_firstConsistentlyInteractiveResolver","startSchedulingTimerTasks","lastLongTaskEnd","FirstConsistentlyInteractiveCore","_incompleteRequestStarts","rescheduleTimer","earliestTime","setTimeout","_this2","_checkTTI","performance","now","_unregisterListeners","_performanceObserver","PerformanceObserver","entryList","entries","getEntries","entry","entryType","_networkRequestFinishedCallback","_longTaskFinishedCallback","entryTypes","_mutationObserver","ActivityTrackerUtils","_mutationObserverCallback","bind","_beforeJSInitiatedRequestCallback","_afterJSInitiatedRequestCallback","_registerPerformanceObserver","_registerMutationObserver","set","size","delete","fetchStart","responseEnd","taskEndTime","mutationRecord","timing","domContentLoadedEventEnd","navigationStart","lastBusy","firstPaint","chrome","loadTimes","firstPaintTime","_getMinValue","disable","values","getFirstConsistentlyInteractive","opts","PerformanceLongTaskTiming"],"mappings":"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"}